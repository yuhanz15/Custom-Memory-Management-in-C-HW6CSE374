Yuhan Zhang
12/16/2022

All pieces is written by Yuhan Zhang, myself.

My data structure: I simply use linkedList in this assignment with freeNode, and didn't apply heap algorithm due to the little time I have.

	I don't have enough time to implement it with heap algorithm, but I want to show that I understand why we use heap.
	Heap algorithm require us to put all free blocks in freelist with its size descending or ascending. In this assignment, heap makes getmem easier than simply using linked list. Say that we want to find a block with 30 bytes, and I have a freelist with 16 bytes, 32 bytes, and 128 bytes. When I travel to the 32 byte block, I will know that this is exactly what I want since the next block would be larger than this, and return it immediately. This feature reduces the complexity of getmem since we don't need to look at all the blocks to find the most suitable one.

Optimization: Due to the little time I have, I don't think I did any big optimization in this assignment. I add two new global parameters in mem_impl.h: totalfree and blockfree, just wants to make the funtion get_mem_stats() faster since it doesn't need to calculate the number of free blocks and free memory when I call it.

Running results: My program use little time in the first 1000 calls, which only has 0.5ms for runtime, but if the memory is pretty large or run too much calls, its performance drops and use more runtime. I think this happens because I am using linked list - if there is too many nodes in it, it would use more and more time traveling the whole list and try to find a suitable block in getmem call, which is also the same in freemem call.

Resource uses: I wrote my code mostly by myself, with help from Professor Megan, Google, Stackoverflow and ED board post.
